/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
	nodes: {
		Cube: THREE.Mesh
		Question_Mark001: THREE.Mesh
		Question_Mark002: THREE.Mesh
		Question_Mark003: THREE.Mesh
		Question_Mark004: THREE.Mesh
	}
	materials: {
		Material: THREE.MeshStandardMaterial
		["Material.003"]: THREE.MeshStandardMaterial
		["Material.004"]: THREE.MeshStandardMaterial
		["Material.005"]: THREE.MeshStandardMaterial
		["Material.006"]: THREE.MeshStandardMaterial
	}
}

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
	const group = useRef<THREE.Group>()
	const { nodes, materials } = useGLTF(
		"/3D-gallery/item_box.glb"
	) as GLTFResult
	return (
		<group ref={group as any} {...props} dispose={null}>
			<mesh
				geometry={nodes.Cube.geometry}
				material={materials.Material}
			/>
			<mesh
				geometry={nodes.Question_Mark001.geometry}
				material={materials["Material.003"]}
				position={[1.05, 0, 0]}
				scale={[0.05, 0.7, 0.7]}
			/>
			<mesh
				geometry={nodes.Question_Mark002.geometry}
				material={materials["Material.004"]}
				position={[-1.05, 0, 0]}
				rotation={[Math.PI, 0, Math.PI]}
				scale={[0.05, 0.7, 0.7]}
			/>
			<mesh
				geometry={nodes.Question_Mark003.geometry}
				material={materials["Material.005"]}
				position={[0, 0, -1.05]}
				rotation={[0, Math.PI / 2, 0]}
				scale={[0.05, 0.7, 0.7]}
			/>
			<mesh
				geometry={nodes.Question_Mark004.geometry}
				material={materials["Material.006"]}
				position={[0, 0, 1.05]}
				rotation={[0, -Math.PI / 2, 0]}
				scale={[0.05, 0.7, 0.7]}
			/>
		</group>
	)
}

useGLTF.preload("/3D-gallery/item_box.glb")
